/*
  August 2014

  myFlight32 Rev -

  Copyright (c) 2014 John Ihlein.  All rights reserved.

  Open Source STM32 Based Multicopter Control Software

  Designed to run on Naze32Pro and AQ32 Flight Control Boards

  Includes code and/or ideas from:

  1)AeroQuad
  2)BaseFlight
  3)MultiWii
  4)Paparazzi UAV
  5)S.O.H. Madgwick
  6)UAVX
  7)Me!!

  This program is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program. If not, see <http://www.gnu.org/licenses/>.
*/

///////////////////////////////////////////////////////////////////////////////

#pragma once

///////////////////////////////////////////////////////////////////////////////
// UART6 Init
///////////////////////////////////////////////////////////////////////////////

void uart6Init(void);

///////////////////////////////////////////////////////////////////////////////
// UART6 Available
///////////////////////////////////////////////////////////////////////////////

uint32_t uart6Available(void);

///////////////////////////////////////////////////////////////////////////////
// UART6 Clear Buffer
///////////////////////////////////////////////////////////////////////////////

void uart6ClearBuffer(void);

///////////////////////////////////////////////////////////////////////////////
// UART6 Number of Characters Available
///////////////////////////////////////////////////////////////////////////////

uint16_t uart6NumCharsAvailable(void);

///////////////////////////////////////////////////////////////////////////////
// UART6 Read
///////////////////////////////////////////////////////////////////////////////

uint8_t uart6Read(void);

///////////////////////////////////////////////////////////////////////////////
// UART6 Read Poll
///////////////////////////////////////////////////////////////////////////////

uint8_t uart6ReadPoll(void);

///////////////////////////////////////////////////////////////////////////////
// UART6 Write
///////////////////////////////////////////////////////////////////////////////

void uart6Write(uint8_t ch);

///////////////////////////////////////////////////////////////////////////////
// UART6 Print
///////////////////////////////////////////////////////////////////////////////

void uart6Print(char *str);

///////////////////////////////////////////////////////////////////////////////
// UART3 Print Formatted - Print formatted string to UART3
// From Ala42
///////////////////////////////////////////////////////////////////////////////

void uart6PrintF(const char * fmt, ...);

///////////////////////////////////////////////////////////////////////////////
// UART3 Print Binary
///////////////////////////////////////////////////////////////////////////////

void uart6PrintBinary(uint8_t *buf, uint16_t length);

///////////////////////////////////////////////////////////////////////////////
